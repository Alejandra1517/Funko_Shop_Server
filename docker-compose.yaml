services:
  orders:
    build:
      context: .
      dockerfile: apps/orders/Dockerfile
      target: development
    command: npm run start:dev orders
    env_file:
      - ./apps/orders/.env
    depends_on:
    - rabbitmq
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
  auth:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    env_file:
      - apps/auth/.env
    depends_on:
    - rabbitmq
    ports:
      - '3001:3001'
    volumes:
      - .:/usr/src/app
  products:
    build:
      context: .
      dockerfile: apps/products/Dockerfile
      target: development
    command: npm run start:dev products
    env_file:
      - ./apps/products/.env
    depends_on:
    - rabbitmq
    ports:
      - '3002:3002'
    volumes:
      - .:/usr/src/app
  categories:
    build:
      context: .
      dockerfile: apps/categories/Dockerfile
      target: development
    command: npm run start:dev categories
    env_file:
      - ./apps/categories/.env
    depends_on:
    - rabbitmq
  cart:
    build:
      context: .
      dockerfile: apps/cart/Dockerfile
      target: development
    command: npm run start:dev cart
    env_file:
      - ./apps/cart/.env
    depends_on:
    - rabbitmq
    ports:
      - '3004:3004'
    volumes:
      - .:/usr/src/app
  rabbitmq:
    image: rabbitmq
    ports:
      - '5673:5672'
  mongo:
    image: mongo


# services:
#   orders:
#     build:
#       context: .
#       dockerfile: ./apps/orders/Dockerfile
#       target: development
#     command: npm run start:dev orders
#     env_file:
#       - ./apps/orders/.env
#     depends_on:
#       - mongodb-primary
#       - mongodb-secondary
#       - mongodb-arbiter
#       - auth
#     volumes:
#       - .:/usr/src/app
#       - /usr/src/app/node_modules
#     ports:
#       - '3000:3000'
#   auth:
#     build:
#       context: .
#       dockerfile: ./apps/auth/Dockerfile
#       target: development
#     command: npm run start:dev auth
#     ports:
#       - '3001:3001'
#     env_file:
#       - ./apps/auth/.env
#     depends_on:
#       - mongodb-primary
#       - mongodb-secondary
#       - mongodb-arbiter
#     volumes:
#       - .:/usr/src/app
#       - /usr/src/app/node_modules

#   mongodb-primary:
#     image: docker.io/bitnami/mongodb:5.0
#     environment:
#       - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
#       - MONGODB_REPLICA_SET_MODE=primary
#       - MONGODB_ROOT_PASSWORD=password123
#       - MONGODB_REPLICA_SET_KEY=replicasetkey123
#     volumes:
#       - 'mongodb_master_data:/bitnami/mongodb'
#     ports:
#       - '27017:27017'

#   mongodb-secondary:
#     image: docker.io/bitnami/mongodb:5.0
#     depends_on:
#       - mongodb-primary
#     environment:
#       - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
#       - MONGODB_REPLICA_SET_MODE=secondary
#       - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
#       - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
#       - MONGODB_REPLICA_SET_KEY=replicasetkey123

#   mongodb-arbiter:
#     image: docker.io/bitnami/mongodb:5.0
#     depends_on:
#       - mongodb-primary
#     environment:
#       - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
#       - MONGODB_REPLICA_SET_MODE=arbiter
#       - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
#       - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
#       - MONGODB_REPLICA_SET_KEY=replicasetkey123

# volumes:
#   mongodb_master_data:
#     driver: local
